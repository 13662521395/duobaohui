package com.shinc.duobaohui.fragment;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.telephony.TelephonyManager;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.shinc.duobaohui.ProductDetailActivity;import com.shinc.duobaohui.R;import com.shinc.duobaohui.RechargeActivity;import com.shinc.duobaohui.SearchActivity;import com.shinc.duobaohui.UserMainPageActivity;import com.shinc.duobaohui.WebActiveActivity;import com.shinc.duobaohui.adapter.GridAdapter;import com.shinc.duobaohui.adapter.ProductGridViewAdapter;import com.shinc.duobaohui.base.BaseFragment;import com.shinc.duobaohui.bean.IndexBannerBean;import com.shinc.duobaohui.bean.IndexGetWinnerListBean;import com.shinc.duobaohui.bean.IndexWinnerBean;import com.shinc.duobaohui.bean.ProductBean;import com.shinc.duobaohui.bean.ProductListBean;import com.shinc.duobaohui.bean.TakePartBean;import com.shinc.duobaohui.constant.Constant;import com.shinc.duobaohui.customview.banner.ConvenientBanner;import com.shinc.duobaohui.customview.banner.NetworkImageHolderView;import com.shinc.duobaohui.customview.banner.holder.CBViewHolderCreator;import com.shinc.duobaohui.customview.banner.listener.OnItemClickListener;import com.shinc.duobaohui.customview.dialog.DialogLottery;import com.shinc.duobaohui.customview.dialog.LoadingDialog;import com.shinc.duobaohui.customview.imp.AutoTextView;import com.shinc.duobaohui.customview.imp.CustomTextView;import com.shinc.duobaohui.customview.imp.LoadMoreListView;import com.shinc.duobaohui.customview.ptr.PtrClassicFrameLayout;import com.shinc.duobaohui.customview.ptr.PtrDefaultHandler;import com.shinc.duobaohui.customview.ptr.PtrFrameLayout;import com.shinc.duobaohui.customview.ptr.PtrHandler;import com.shinc.duobaohui.event.HttpIndexBannerEvent;import com.shinc.duobaohui.event.HttpIndexWinnerListEvent;import com.shinc.duobaohui.event.HttpProductEvent;import com.shinc.duobaohui.event.UmPhshMsgEvent;import com.shinc.duobaohui.event.UtilsEvent;import com.shinc.duobaohui.model.DeprivePreciousModelInterface;import com.shinc.duobaohui.model.impl.DeprivePreciousModelImpl;import com.shinc.duobaohui.utils.CodeVerifyUtils;import com.shinc.duobaohui.utils.WaitLoadingUtils;import java.util.ArrayList;import de.greenrobot.event.EventBus;/** * Created by liugaopo on 15/9/17. * 首页fragment; */public class DeprivePreciousFragment extends BaseFragment implements View.OnClickListener {    private ConvenientBanner indexBannerView;    private AutoTextView informText;    private CustomTextView moodFilter;    private CustomTextView lastestFilter;    private CustomTextView progressFilter;    private RelativeLayout productNumFilter;    private LoadMoreListView productGridView;    private String sort = "";    private DeprivePreciousModelInterface deprivePreciousModelImpl;    private CustomTextView productNeedNum;    private PtrClassicFrameLayout ptrLayout;    private Activity mActivity;    private ProductGridViewAdapter productGridViewAdapter;    private int page = 1;//获取分页数据的时候传递的页面编号；    private boolean flag = false;//保存升序、倒序的标示；    private ProductListBean productListBean;    private boolean isRefresh = false;    private boolean isFirst = true;    private boolean isWarningRefresh = false;    private ArrayList<IndexWinnerBean> indexWinnerBeanArrayList;//小喇叭数据；    private static final int NEXT = 1;    private int winnerIndex = 0;    private ArrayList<ProductBean> list;    private ImageView iconUp;    private ImageView iconDown;    private boolean ifFirst = true;    private TelephonyManager tm;    private String deviceId;    private ImageView openSlidingBtn;    private ImageView searchBtn;    private OnClickSlidingMenuListener onClickSlidingMenuListener;    private LoadingDialog loadingDialog;    private WaitLoadingUtils waitLoadingUtils;    private View header;    private View header2;    private CustomTextView mainMoodFilter;    private CustomTextView mainLastestFilter;    private CustomTextView mainProgressFilter;    private RelativeLayout mainProductNumFilter;    private CustomTextView mainProductNeedNum;    private ImageView mainIconUp;    private ImageView mainIconDown;    private boolean isClickItem;    private View titleLine;    //设置点击slidingmenu的开启按钮的回调事件；    public void setOnClickSlidingMenuListener(OnClickSlidingMenuListener onClickSlidingMenuListener) {        this.onClickSlidingMenuListener = onClickSlidingMenuListener;    }    @Override    public String getFragmentName() {        return DeprivePreciousFragment.class.getSimpleName();    }    private Handler mHandler;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.fragment_deprive_precious_layout, null);        if (!EventBus.getDefault().isRegistered(this)) {            EventBus.getDefault().register(this);        }        mHandler = new DeprivePreioursHandler();        loadingDialog = new LoadingDialog(getActivity(), R.style.dialog);        tm = (TelephonyManager) getActivity().getSystemService(Context.TELEPHONY_SERVICE);        deviceId = tm.getDeviceId();        this.mActivity = getActivity();        initView(view);        initData();        initEvent();        return view;    }    /**     * 初始化页面；     *     * @param view     */    private void initView(View view) {        waitLoadingUtils = new WaitLoadingUtils(view);        waitLoadingUtils.show();        header = mActivity.getLayoutInflater().inflate(R.layout.deprive_fragment_gridview_header, null);        header2 = mActivity.getLayoutInflater().inflate(R.layout.deprive_fragment_gridview_header2, null);        indexBannerView = (ConvenientBanner) header.findViewById(R.id.deprive_precious_banner);//banner图；        informText = (AutoTextView) header.findViewById(R.id.inform_tv);        informText.setText("资讯小喇叭~");        moodFilter = (CustomTextView) header2.findViewById(R.id.mood_tv);        lastestFilter = (CustomTextView) header2.findViewById(R.id.lastest_tv);        progressFilter = (CustomTextView) header2.findViewById(R.id.progress_tv);        productNumFilter = (RelativeLayout) header2.findViewById(R.id.product_num);        productNeedNum = (CustomTextView) header2.findViewById(R.id.product_need_num);        productGridView = (LoadMoreListView) view.findViewById(R.id.product_grid_view);        productGridView.addHeaderView(header);        productGridView.addHeaderView(header2);        iconUp = (ImageView) header2.findViewById(R.id.icon_arrow_up);        iconDown = (ImageView) header2.findViewById(R.id.icon_arrow_down);        ptrLayout = (PtrClassicFrameLayout) view.findViewById(R.id.pull_to_refresh_view);        ptrLayout.setLastUpdateTimeRelateObject(this);//        indexBannerView.getViewPager().setNestParent(ptrLayout);        ptrLayout.disableWhenHorizontalMove(true);        openSlidingBtn = (ImageView) view.findViewById(R.id.open_drawer_layout);        searchBtn = (ImageView) view.findViewById(R.id.search_img);        final LinearLayout mainTitle = (LinearLayout) view.findViewById(R.id.product_main_title);        mainMoodFilter = (CustomTextView) view.findViewById(R.id.main_mood_tv);        mainLastestFilter = (CustomTextView) view.findViewById(R.id.main_lastest_tv);        mainProgressFilter = (CustomTextView) view.findViewById(R.id.main_progress_tv);        mainProductNumFilter = (RelativeLayout) view.findViewById(R.id.main_product_num);        mainProductNeedNum = (CustomTextView) view.findViewById(R.id.main_product_need_num);        mainIconUp = (ImageView) view.findViewById(R.id.main_icon_arrow_up);        mainIconDown = (ImageView) view.findViewById(R.id.main_icon_arrow_down);        titleLine = view.findViewById(R.id.product_main_title_line);        productGridView.setCallback(new LoadMoreListView.OnCallBack() {            @Override            public void showTitle(boolean isShow) {                if (isShow) {                    mainTitle.setVisibility(View.VISIBLE);                    titleLine.setVisibility(View.VISIBLE);                } else {                    mainTitle.setVisibility(View.GONE);                    titleLine.setVisibility(View.GONE);                }            }        });    }    /**     * 获取数据；     */    private void initData() {        deprivePreciousModelImpl = new DeprivePreciousModelImpl(mActivity);//初始化model层；        activeText(moodFilter, true);        moodFilter.setEnabled(false);        activeText(mainMoodFilter, true);        mainMoodFilter.setEnabled(false);        deprivePreciousModelImpl.getBanner();        deprivePreciousModelImpl.getwinnerList();        deprivePreciousModelImpl.getProductInfo("rq", "1", deviceId);        sort = "rq";    }    /**     * 初始化数据；     */    private void initEvent() {        searchBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //todo 点击搜索按钮，跳转到search页面；                Intent intent = new Intent(mActivity, SearchActivity.class);                startActivity(intent);            }        });        //开启slidingmenu的点击事件；；        openSlidingBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (onClickSlidingMenuListener != null) {                    onClickSlidingMenuListener.onClickSlidingMenu();                }            }        });        informText.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (indexWinnerBeanArrayList != null && indexWinnerBeanArrayList.get(winnerIndex) != null) {                    IndexWinnerBean winnerBean = indexWinnerBeanArrayList.get(winnerIndex);                    Intent intent = new Intent();                    intent.setClass(mActivity, UserMainPageActivity.class);                    TakePartBean bean = new TakePartBean(winnerBean.getUser_id(), winnerBean.getNick_name(), null, winnerBean.getLuck_code_create_time(), winnerBean.getHead_pic(), null, null, null);                    intent.putExtra("takePart", bean);                    mActivity.startActivity(intent);                }            }        });        ptrLayout.setPtrHandler(new PtrHandler() {            @Override            public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header) {                return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header);            }            @Override            public void onRefreshBegin(PtrFrameLayout frame) {                page = 1;                isRefresh = true;                productGridView.setLoadReset();                if (sort.equals("rq")) {                    deprivePreciousModelImpl.getProductInfo("rq", page + "", deviceId);                } else if (sort.equals("zx")) {                    deprivePreciousModelImpl.getProductInfo("zx", page + "", deviceId);                } else if (sort.equals("jd")) {                    deprivePreciousModelImpl.getProductInfo("jd", page + "", deviceId);                } else if (sort.equals("zxrs")) {                    if (flag) {                        deprivePreciousModelImpl.getProductInfo("zxrs1", page + "", deviceId);                    } else {                        deprivePreciousModelImpl.getProductInfo("zxrs0", page + "", deviceId);                    }                }                deprivePreciousModelImpl.getwinnerList();                deprivePreciousModelImpl.getBanner();                isWarningRefresh = true;            }        });        productGridView.setLoadMoreListener(new LoadMoreListView.LoadMoreDateListener() {            @Override            public void loadMore() {                isRefresh = true;                page++;                if (sort.equals("rq")) {                    deprivePreciousModelImpl.getProductInfo("rq", page + "", deviceId);                } else if (sort.equals("zx")) {                    deprivePreciousModelImpl.getProductInfo("zx", page + "", deviceId);                } else if (sort.equals("jd")) {                    deprivePreciousModelImpl.getProductInfo("jd", page + "", deviceId);                } else if (sort.equals("zxrs")) {                    if (flag) {                        deprivePreciousModelImpl.getProductInfo("zxrs1", page + "", deviceId);                    } else {                        deprivePreciousModelImpl.getProductInfo("zxrs0", page + "", deviceId);                    }                }            }        });//        productGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {//            @Override//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {//                //  点击item跳转到商品详情页；//                if (list != null) {//                    Intent intent = new Intent(mActivity, ProductDetailActivity.class);//                    intent.putExtra("PRODUCTID", list.get(position).getPeriod_id());//                    startActivity(intent);//                }//            }//        });        moodFilter.setOnClickListener(this);        lastestFilter.setOnClickListener(this);        progressFilter.setOnClickListener(this);        productNeedNum.setOnClickListener(this);        mainMoodFilter.setOnClickListener(this);        mainLastestFilter.setOnClickListener(this);        mainProgressFilter.setOnClickListener(this);        mainProductNeedNum.setOnClickListener(this);    }    @Override    public void onClick(View v) {        isClickItem = true;        productGridView.setLoadReset();        switch (v.getId()) {            //点击人气            case R.id.mood_tv:            case R.id.main_mood_tv:                deprivePreciousModelImpl.getProductInfo("rq", "1", deviceId);                sort = "rq";                //todo 进行请求，传递type;                activeText(moodFilter, true);                moodFilter.setEnabled(false);                activeText(lastestFilter, false);                lastestFilter.setEnabled(true);                activeText(progressFilter, false);                progressFilter.setEnabled(true);                activeText(productNeedNum, false);                iconUp.setImageResource(R.drawable.icon_up);                iconDown.setImageResource(R.drawable.icon_down);                activeText(mainMoodFilter, true);                mainMoodFilter.setEnabled(false);                activeText(mainLastestFilter, false);                mainLastestFilter.setEnabled(true);                activeText(mainProgressFilter, false);                mainProgressFilter.setEnabled(true);                activeText(mainProductNeedNum, false);                mainIconUp.setImageResource(R.drawable.icon_up);                mainIconDown.setImageResource(R.drawable.icon_down);                page = 1;                flag = false;                loadingDialog.showLoading();                break;            //d点击最新            case R.id.lastest_tv:            case R.id.main_lastest_tv:                //todo 进行请求，传递type;                deprivePreciousModelImpl.getProductInfo("zx", "1", deviceId);                sort = "zx";                activeText(moodFilter, false);                moodFilter.setEnabled(true);                activeText(lastestFilter, true);                lastestFilter.setEnabled(false);                activeText(progressFilter, false);                progressFilter.setEnabled(true);                activeText(productNeedNum, false);                iconUp.setImageResource(R.drawable.icon_up);                iconDown.setImageResource(R.drawable.icon_down);                activeText(mainMoodFilter, false);                mainMoodFilter.setEnabled(true);                activeText(mainLastestFilter, true);                mainLastestFilter.setEnabled(false);                activeText(mainProgressFilter, false);                mainProgressFilter.setEnabled(true);                activeText(mainProductNeedNum, false);                mainIconUp.setImageResource(R.drawable.icon_up);                mainIconDown.setImageResource(R.drawable.icon_down);                page = 1;                flag = false;                loadingDialog.showLoading();                break;            //点击进度；            case R.id.progress_tv:            case R.id.main_progress_tv:                //todo 进行请求，传递type；                deprivePreciousModelImpl.getProductInfo("jd", "1", deviceId);                sort = "jd";                activeText(moodFilter, false);                moodFilter.setEnabled(true);                activeText(lastestFilter, false);                lastestFilter.setEnabled(true);                activeText(progressFilter, true);                progressFilter.setEnabled(false);                activeText(productNeedNum, false);                iconUp.setImageResource(R.drawable.icon_up);                iconDown.setImageResource(R.drawable.icon_down);                activeText(mainMoodFilter, false);                mainMoodFilter.setEnabled(true);                activeText(mainLastestFilter, false);                mainLastestFilter.setEnabled(true);                activeText(mainProgressFilter, true);                mainProgressFilter.setEnabled(false);                activeText(mainProductNeedNum, false);                mainIconUp.setImageResource(R.drawable.icon_up);                mainIconDown.setImageResource(R.drawable.icon_down);                page = 1;                flag = false;                loadingDialog.showLoading();                break;            //点击总需人数；            case R.id.product_need_num:            case R.id.main_product_need_num://todo 进行请求，传递type：                if (flag) {                    deprivePreciousModelImpl.getProductInfo("zxrs0", "1", deviceId);                    iconUp.setImageResource(R.drawable.icon_up_sel);                    iconDown.setImageResource(R.drawable.icon_down);                    mainIconUp.setImageResource(R.drawable.icon_up_sel);                    mainIconDown.setImageResource(R.drawable.icon_down);                    flag = false;                } else {                    deprivePreciousModelImpl.getProductInfo("zxrs1", "1", deviceId);                    iconUp.setImageResource(R.drawable.icon_up);                    iconDown.setImageResource(R.drawable.icon_down_sel);                    mainIconUp.setImageResource(R.drawable.icon_up);                    mainIconDown.setImageResource(R.drawable.icon_down_sel);                    flag = true;                }                sort = "zxrs";                activeText(moodFilter, false);                moodFilter.setEnabled(true);                activeText(lastestFilter, false);                lastestFilter.setEnabled(true);                activeText(progressFilter, false);                progressFilter.setEnabled(true);                activeText(productNeedNum, true);                activeText(mainMoodFilter, false);                mainMoodFilter.setEnabled(true);                activeText(mainLastestFilter, false);                mainLastestFilter.setEnabled(true);                activeText(mainProgressFilter, false);                mainProgressFilter.setEnabled(true);                activeText(mainProductNeedNum, true);                page = 1;                loadingDialog.showLoading();                break;        }    }    /**     * 传递View和标示，对文字进行操作；     *     * @param tv     * @param flag     */    private void activeText(TextView tv, boolean flag) {        if (flag) {            tv.setTextColor(getResources().getColor(R.color.c_ff5a5a));        } else {            tv.setTextColor(getResources().getColor(R.color.c_5f5f5f));        }    }    public void onEventMainThread(UmPhshMsgEvent var) {        DialogLottery.createLotteryDialog(mActivity, var.getId(), var.getMsg());    }    /**     * banner数据的操作；     *     * @param httpIndexBannerEvent     */    public void onEventMainThread(HttpIndexBannerEvent httpIndexBannerEvent) {        final IndexBannerBean indexBannerBean = httpIndexBannerEvent.getIndexBannerBean();        if (indexBannerBean != null && "1".equals(indexBannerBean.getCode())) {            // 获取到banner数据，进行操作；            ArrayList<String> localImages = new ArrayList<>();            for (int position = 0; position < indexBannerBean.getData().size(); position++)                localImages.add(indexBannerBean.getData().get(position).getPic_url());            indexBannerView.setPages(new CBViewHolderCreator<NetworkImageHolderView>() {                @Override                public NetworkImageHolderView createHolder() {                    return new NetworkImageHolderView();                }            }, localImages)//设置两个点图片作为翻页指示器，不设置则没有指示器，可以根据自己需求自行配合自己的指示器,不需要圆点指示器可用不设                    .setPageIndicator(new int[]{R.drawable.icon_picdefault_sel, R.drawable.icon_picdefault_nor})                            //设置指示器的方向                    .setPageIndicatorAlign(ConvenientBanner.PageIndicatorAlign.ALIGN_PARENT_RIGHT);            indexBannerView.setOnItemClickListener(new OnItemClickListener() {                @Override                public void onItemClick(int position) {                    String type = indexBannerBean.getData().get(position).getType();                    String linkUrl = indexBannerBean.getData().get(position).getLink_url();                    switch (type) {                        case "0":                            //type 为0的时候跳转到指定商品详情页面；                            Intent intent = new Intent(mActivity, ProductDetailActivity.class);                            intent.putExtra("PRODUCTID", linkUrl);                            intent.putExtra("BANNER", "banner");                            startActivity(intent);                            break;                        case "1":                            //type 为1的时候跳转到web页面；                            Intent webIntent = new Intent(mActivity, WebActiveActivity.class);                            webIntent.putExtra("type", "1");                            webIntent.putExtra("url", linkUrl);                            startActivity(webIntent);                            break;                        case "3":                            Intent gotoRecharge = new Intent(mActivity, RechargeActivity.class);                            startActivity(gotoRecharge);                            break;                        default:                            break;                    }                }            });//            indexBannerView.setData(0, indexBannerBean, new IndexBannerViewInterface.SetOnPageClick() {//                @Override//                public void onClick(String id, String type, String linkUrl) {//                    switch (type) {//                        case "0"://                            //type 为0的时候跳转到指定商品详情页面；//                            Intent intent = new Intent(mActivity, ProductDetailActivity.class);//                            intent.putExtra("PRODUCTID", linkUrl);//                            intent.putExtra("BANNER", "banner");//                            startActivity(intent);//                            break;//                        case "1"://                            //type 为1的时候跳转到web页面；//                            Intent webIntent = new Intent(mActivity, WebActiveActivity.class);//                            webIntent.putExtra("type", "1");//                            webIntent.putExtra("url", linkUrl);//                            startActivity(webIntent);//                            break;//                        default://                            break;//                    }//                }//            });        }    }    /**     * 首页商品列表数据；     *     * @param httpProductEvent     */    public void onEventMainThread(HttpProductEvent httpProductEvent) {        loadingDialog.hideLoading();        waitLoadingUtils.disable();        if (ptrLayout != null && isRefresh) {            ptrLayout.refreshComplete();            isRefresh = false;        }        if (httpProductEvent.getProductListBean() == null) {            //加载失败；            noWebLayout();        } else {            //判断如果是session失效，            productListBean = httpProductEvent.getProductListBean();            if (CodeVerifyUtils.verifyCode(productListBean.getCode())) {                CodeVerifyUtils.verifySession(mActivity);                EventBus.getDefault().post(new UtilsEvent("RELOAD_HEAD"));            } else {                if (productListBean != null && productListBean.getCode() != null && "1".equals(productListBean.getCode())) {//                    noWeb.setVisibility(View.GONE);                    //todo 得到商品列表的数据，进行数据赋值；                    if (productListBean.getData() != null) {                        if (productGridViewAdapter == null) {                            productGridViewAdapter = new ProductGridViewAdapter(mActivity);                            GridAdapter gridAdapter = new GridAdapter(mActivity, productGridViewAdapter);                            gridAdapter.setNumColumns(2);                            gridAdapter.setOnItemClickListener(new GridAdapter.OnGridItemClickListener() {                                @Override                                public void onItemClick(int pos, int realPos) {                                    Intent intent = new Intent(mActivity, ProductDetailActivity.class);                                    intent.putExtra("PRODUCTID", list.get(realPos).getPeriod_id());                                    startActivity(intent);                                }                            });                            productGridView.setAdapter(gridAdapter);                        }                        if (page > 1) {                            list.addAll(productListBean.getData());                        } else {                            list = productListBean.getData();                        }                        productGridViewAdapter.setListChildDatas(list);                        productGridViewAdapter.notifyDataSetChanged();                        if (isClickItem) {                            productGridView.smoothScrollToPositionFromTop(0, 0);                            isClickItem = false;                        }                    } else {                        productGridView.setLoadComplete();                        page--;                    }                }            }        }    }    /**     * 首页小喇叭数据的赋值；     *     * @param httpIndexWinnerListEvent     */    public void onEventMainThread(HttpIndexWinnerListEvent httpIndexWinnerListEvent) {        IndexGetWinnerListBean indexGetWinnerListBean = httpIndexWinnerListEvent.getIndexGetWinnerListBean();        if (indexGetWinnerListBean != null &&                indexGetWinnerListBean.getCode() != null &&                "1".equals(indexGetWinnerListBean.getCode())) {            indexWinnerBeanArrayList = indexGetWinnerListBean.getData();            //todo 得到商品列表的数据，进行数据赋值；            mHandler.sendEmptyMessage(NEXT);        }    }    /**     * 控制该页面刷新；通过EventBus进行数据传递；     *     * @param utilsEvent     */    public void onEventMainThread(UtilsEvent utilsEvent) {        if ("REFRESH".equals(utilsEvent.getFlag())) {            ptrLayout.autoRefresh();        }    }    private void noWebLayout() {        waitLoadingUtils.isNoWeb(new WaitLoadingUtils.OnNoWebClick() {            @Override            public void onClick() {                waitLoadingUtils.show();                waitLoadingUtils.haveWeb();                deprivePreciousModelImpl.getBanner();                deprivePreciousModelImpl.getwinnerList();                deprivePreciousModelImpl.getProductInfo("rq", "1", deviceId);                sort = "rq";            }        });    }    @Override    public void onResume() {        super.onResume();        indexBannerView.startTurning(3000);        if (Constant.RELOAD) {            initData();            Constant.RELOAD = false;        }    }    @Override    public void onPause() {        super.onPause();        indexBannerView.stopTurning();    }    @Override    public void onDestroy() {        super.onDestroy();        if (EventBus.getDefault().isRegistered(this)) {            EventBus.getDefault().unregister(this);        }        if (list != null) {            list = null;        }//        if (indexBannerView != null) {//            indexBannerView.onDestroyHandler();//        }        if (mHandler != null) {            mHandler.removeCallbacksAndMessages(null);            mHandler = null;        }    }    class DeprivePreioursHandler extends Handler {        public void handleMessage(android.os.Message msg) {            switch (msg.what) {                case NEXT:                    if (indexWinnerBeanArrayList.size() > 0) {                        if (winnerIndex < indexWinnerBeanArrayList.size() - 1) {                            winnerIndex++;                        } else if (winnerIndex >= indexWinnerBeanArrayList.size() - 1) {                            winnerIndex = 0;                        }                        IndexWinnerBean indexWinnerBean = indexWinnerBeanArrayList.get(winnerIndex);                        informText.setText("恭喜" + indexWinnerBean.getNick_name() + "夺得[第" + indexWinnerBean.getPeriod_number() + "期]" + indexWinnerBean.getGoods_name());                        if (isWarningRefresh) {                            this.removeMessages(NEXT);                            isWarningRefresh = false;                        }                        this.sendEmptyMessageDelayed(NEXT, 5000);                    }                    break;            }        }    }    public interface OnClickSlidingMenuListener {        void onClickSlidingMenu();    }}